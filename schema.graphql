"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

input ActivateUserInput {
  tokenPlainText: String!
}

input ActivationTokenInput {
  email: String!
}

type AuthenticationToken {
  tokenPlainText: String!
  user: User!
}

"""
CreateEquipmentInput is used for create Equipment object.
Input was generated by ent.
"""
input CreateEquipmentInput {
  exerciseIDs: [ID!]
  image: String!
  name: String!
}

"""
CreateExerciseInput is used for create Exercise object.
Input was generated by ent.
"""
input CreateExerciseInput {
  equipmentsID: ID
  exerciseTypesID: ID
  howTo: String
  image: String
  musclesGroupsID: ID
  name: String!
  routineIDs: [ID!]
  usersID: ID
  workoutLogIDs: [ID!]
}

"""
CreateExerciseTypeInput is used for create ExerciseType object.
Input was generated by ent.
"""
input CreateExerciseTypeInput {
  description: String!
  exerciseIDs: [ID!]
  name: String!
  properties: [String!]!
}

"""
CreateMusclesGroupInput is used for create MusclesGroup object.
Input was generated by ent.
"""
input CreateMusclesGroupInput {
  exerciseIDs: [ID!]
  image: String!
  name: String!
}

input CreateRoutineExerciseInput {
  exerciseID: ID!
  restTimer: String
  routineID: ID!
  sets: [SetInput!]!
  userID: ID
}

"""
CreateRoutineInput is used for create Routine object.
Input was generated by ent.
"""
input CreateRoutineInput {
  exerciseIDs: [ID!]
  name: String!
  usersID: ID
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  exerciseIDs: [ID!]
  hashedPassword: String!
  name: String!
  routineIDs: [ID!]
  tokenIDs: [ID!]
  username: String!
  workoutIDs: [ID!]
  workoutLogIDs: [ID!]
}

"""
CreateWorkoutInput is used for create Workout object.
Input was generated by ent.
"""
input CreateWorkoutInput {
  description: String!
  image: String
  name: String!
  reps: Int!
  sets: Int!
  time: String
  usersID: ID
  volume: Int!
  workoutLogIDs: [ID!]
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Equipment implements Node {
  exercises: [Exercise!]
  id: ID!
  image: String!
  name: String!
}

"""A connection to a list of items."""
type EquipmentConnection {
  """A list of edges."""
  edges: [EquipmentEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type EquipmentEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Equipment
}

"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  and: [EquipmentWhereInput!]

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """image field predicates"""
  image: String
  imageContains: String
  imageContainsFold: String
  imageEqualFold: String
  imageGT: String
  imageGTE: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIn: [String!]
  imageLT: String
  imageLTE: String
  imageNEQ: String
  imageNotIn: [String!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: EquipmentWhereInput
  or: [EquipmentWhereInput!]
}

type Exercise implements Node {
  equipmentID: ID
  equipments: Equipment
  exerciseTypeID: ID
  exerciseTypes: ExerciseType
  howTo: String
  id: ID!
  image: String
  musclesGroupID: ID
  musclesGroups: MusclesGroup
  name: String!
  routineExercises: [RoutineExercise!]
  routines: [Routine!]
  userID: ID
  users: User
  workoutLogs: [WorkoutLog!]
}

"""A connection to a list of items."""
type ExerciseConnection {
  """A list of edges."""
  edges: [ExerciseEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ExerciseEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Exercise
}

type ExerciseType implements Node {
  description: String!
  exercises: [Exercise!]
  id: ID!
  name: String!
  properties: [String!]!
}

"""A connection to a list of items."""
type ExerciseTypeConnection {
  """A list of edges."""
  edges: [ExerciseTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ExerciseTypeEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: ExerciseType
}

"""
ExerciseTypeWhereInput is used for filtering ExerciseType objects.
Input was generated by ent.
"""
input ExerciseTypeWhereInput {
  and: [ExerciseTypeWhereInput!]

  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: ExerciseTypeWhereInput
  or: [ExerciseTypeWhereInput!]
}

"""
ExerciseWhereInput is used for filtering Exercise objects.
Input was generated by ent.
"""
input ExerciseWhereInput {
  and: [ExerciseWhereInput!]

  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDContains: ID
  equipmentIDContainsFold: ID
  equipmentIDEqualFold: ID
  equipmentIDGT: ID
  equipmentIDGTE: ID
  equipmentIDHasPrefix: ID
  equipmentIDHasSuffix: ID
  equipmentIDIn: [ID!]
  equipmentIDIsNil: Boolean
  equipmentIDLT: ID
  equipmentIDLTE: ID
  equipmentIDNEQ: ID
  equipmentIDNotIn: [ID!]
  equipmentIDNotNil: Boolean

  """exercise_type_id field predicates"""
  exerciseTypeID: ID
  exerciseTypeIDContains: ID
  exerciseTypeIDContainsFold: ID
  exerciseTypeIDEqualFold: ID
  exerciseTypeIDGT: ID
  exerciseTypeIDGTE: ID
  exerciseTypeIDHasPrefix: ID
  exerciseTypeIDHasSuffix: ID
  exerciseTypeIDIn: [ID!]
  exerciseTypeIDIsNil: Boolean
  exerciseTypeIDLT: ID
  exerciseTypeIDLTE: ID
  exerciseTypeIDNEQ: ID
  exerciseTypeIDNotIn: [ID!]
  exerciseTypeIDNotNil: Boolean

  """equipments edge predicates"""
  hasEquipments: Boolean
  hasEquipmentsWith: [EquipmentWhereInput!]

  """exercise_types edge predicates"""
  hasExerciseTypes: Boolean
  hasExerciseTypesWith: [ExerciseTypeWhereInput!]

  """muscles_groups edge predicates"""
  hasMusclesGroups: Boolean
  hasMusclesGroupsWith: [MusclesGroupWhereInput!]

  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]

  """routines edge predicates"""
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]

  """how_to field predicates"""
  howTo: String
  howToContains: String
  howToContainsFold: String
  howToEqualFold: String
  howToGT: String
  howToGTE: String
  howToHasPrefix: String
  howToHasSuffix: String
  howToIn: [String!]
  howToIsNil: Boolean
  howToLT: String
  howToLTE: String
  howToNEQ: String
  howToNotIn: [String!]
  howToNotNil: Boolean

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """image field predicates"""
  image: String
  imageContains: String
  imageContainsFold: String
  imageEqualFold: String
  imageGT: String
  imageGTE: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIn: [String!]
  imageIsNil: Boolean
  imageLT: String
  imageLTE: String
  imageNEQ: String
  imageNotIn: [String!]
  imageNotNil: Boolean

  """muscles_group_id field predicates"""
  musclesGroupID: ID
  musclesGroupIDContains: ID
  musclesGroupIDContainsFold: ID
  musclesGroupIDEqualFold: ID
  musclesGroupIDGT: ID
  musclesGroupIDGTE: ID
  musclesGroupIDHasPrefix: ID
  musclesGroupIDHasSuffix: ID
  musclesGroupIDIn: [ID!]
  musclesGroupIDIsNil: Boolean
  musclesGroupIDLT: ID
  musclesGroupIDLTE: ID
  musclesGroupIDNEQ: ID
  musclesGroupIDNotIn: [ID!]
  musclesGroupIDNotNil: Boolean

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: ExerciseWhereInput
  or: [ExerciseWhereInput!]

  """user_id field predicates"""
  userID: ID
  userIDContains: ID
  userIDContainsFold: ID
  userIDEqualFold: ID
  userIDGT: ID
  userIDGTE: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDLT: ID
  userIDLTE: ID
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

input LoginInput {
  email: String!
  password: String!
}

type MusclesGroup implements Node {
  exercises: [Exercise!]
  id: ID!
  image: String!
  name: String!
}

"""A connection to a list of items."""
type MusclesGroupConnection {
  """A list of edges."""
  edges: [MusclesGroupEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MusclesGroupEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: MusclesGroup
}

"""
MusclesGroupWhereInput is used for filtering MusclesGroup objects.
Input was generated by ent.
"""
input MusclesGroupWhereInput {
  and: [MusclesGroupWhereInput!]

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """image field predicates"""
  image: String
  imageContains: String
  imageContainsFold: String
  imageEqualFold: String
  imageGT: String
  imageGTE: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIn: [String!]
  imageLT: String
  imageLTE: String
  imageNEQ: String
  imageNotIn: [String!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: MusclesGroupWhereInput
  or: [MusclesGroupWhereInput!]
}

type Mutation {
  CreateRoutineExercise(input: CreateRoutineExerciseInput!): RoutineExercise
  activateUser(input: ActivateUserInput!): AuthenticationToken
  createActivationToken(input: ActivationTokenInput!): String
  createAuthenticationToken(input: LoginInput!): AuthenticationToken
  createPasswordResetToken(input: ResetPasswordInput!): String
  createRoutine(input: CreateRoutineInput!): RoutineEdge
  createUser(input: CreateUserInput!): User!
  updateUserPassword(input: ResetUserPasswordInput!): String
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Query {
  equipmentSlice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for EquipmentSlice returned from the connection."""
    where: EquipmentWhereInput
  ): EquipmentConnection!
  exerciseTypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for ExerciseTypes returned from the connection."""
    where: ExerciseTypeWhereInput
  ): ExerciseTypeConnection!
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
  getUser: User
  musclesGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for MusclesGroups returned from the connection."""
    where: MusclesGroupWhereInput
  ): MusclesGroupConnection!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  routineExercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for RoutineExercises returned from the connection."""
    where: RoutineExerciseWhereInput
  ): RoutineExerciseConnection!
  routines(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Routines returned from the connection."""
    where: RoutineWhereInput
  ): RoutineConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  workoutLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for WorkoutLogs returned from the connection."""
    where: WorkoutLogWhereInput
  ): WorkoutLogConnection!
  workouts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Workouts returned from the connection."""
    where: WorkoutWhereInput
  ): WorkoutConnection!
}

input ResetPasswordInput {
  email: String!
}

input ResetUserPasswordInput {
  password: String!
  tokenPlainText: String!
}

type Routine implements Node {
  exercises: [Exercise!]
  id: ID!
  name: String!
  routineExercises: [RoutineExercise!]
  userID: ID
  users: User
}

"""A connection to a list of items."""
type RoutineConnection {
  """A list of edges."""
  edges: [RoutineEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type RoutineEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Routine
}

type RoutineExercise implements Node {
  exerciseID: ID!
  exercises: Exercise!
  id: ID!
  restTimer: String
  routineID: ID!
  routines: Routine!
  sets: [Set!]!
  userID: ID
  users: User
}

"""A connection to a list of items."""
type RoutineExerciseConnection {
  """A list of edges."""
  edges: [RoutineExerciseEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type RoutineExerciseEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: RoutineExercise
}

"""
RoutineExerciseWhereInput is used for filtering RoutineExercise objects.
Input was generated by ent.
"""
input RoutineExerciseWhereInput {
  and: [RoutineExerciseWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: RoutineExerciseWhereInput
  or: [RoutineExerciseWhereInput!]

  """rest_timer field predicates"""
  restTimer: String
  restTimerContains: String
  restTimerContainsFold: String
  restTimerEqualFold: String
  restTimerGT: String
  restTimerGTE: String
  restTimerHasPrefix: String
  restTimerHasSuffix: String
  restTimerIn: [String!]
  restTimerIsNil: Boolean
  restTimerLT: String
  restTimerLTE: String
  restTimerNEQ: String
  restTimerNotIn: [String!]
  restTimerNotNil: Boolean
}

"""
RoutineWhereInput is used for filtering Routine objects.
Input was generated by ent.
"""
input RoutineWhereInput {
  and: [RoutineWhereInput!]

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: RoutineWhereInput
  or: [RoutineWhereInput!]

  """user_id field predicates"""
  userID: ID
  userIDContains: ID
  userIDContainsFold: ID
  userIDEqualFold: ID
  userIDGT: ID
  userIDGTE: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDLT: ID
  userIDLTE: ID
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

type Set {
  Kg: Int
  Km: Int
  Reps: Int
  Set: Int!
  Time: String
}

input SetInput {
  Kg: Int
  Km: Int
  Reps: Int
  Set: Int!
  Time: String
}

type Token implements Node {
  expiry: String!
  id: ID!
  scope: String!
  userID: ID
  users: User
}

"""
TokenWhereInput is used for filtering Token objects.
Input was generated by ent.
"""
input TokenWhereInput {
  and: [TokenWhereInput!]

  """expiry field predicates"""
  expiry: String
  expiryContains: String
  expiryContainsFold: String
  expiryEqualFold: String
  expiryGT: String
  expiryGTE: String
  expiryHasPrefix: String
  expiryHasSuffix: String
  expiryIn: [String!]
  expiryLT: String
  expiryLTE: String
  expiryNEQ: String
  expiryNotIn: [String!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: TokenWhereInput
  or: [TokenWhereInput!]

  """scope field predicates"""
  scope: String
  scopeContains: String
  scopeContainsFold: String
  scopeEqualFold: String
  scopeGT: String
  scopeGTE: String
  scopeHasPrefix: String
  scopeHasSuffix: String
  scopeIn: [String!]
  scopeLT: String
  scopeLTE: String
  scopeNEQ: String
  scopeNotIn: [String!]

  """user_id field predicates"""
  userID: ID
  userIDContains: ID
  userIDContainsFold: ID
  userIDEqualFold: ID
  userIDGT: ID
  userIDGTE: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDLT: ID
  userIDLTE: ID
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

"""
UpdateEquipmentInput is used for update Equipment object.
Input was generated by ent.
"""
input UpdateEquipmentInput {
  addExerciseIDs: [ID!]
  clearExercises: Boolean
  image: String
  name: String
  removeExerciseIDs: [ID!]
}

"""
UpdateExerciseInput is used for update Exercise object.
Input was generated by ent.
"""
input UpdateExerciseInput {
  addRoutineIDs: [ID!]
  addWorkoutLogIDs: [ID!]
  clearEquipments: Boolean
  clearExerciseTypes: Boolean
  clearHowTo: Boolean
  clearImage: Boolean
  clearMusclesGroups: Boolean
  clearRoutines: Boolean
  clearUsers: Boolean
  clearWorkoutLogs: Boolean
  equipmentsID: ID
  exerciseTypesID: ID
  howTo: String
  image: String
  musclesGroupsID: ID
  name: String
  removeRoutineIDs: [ID!]
  removeWorkoutLogIDs: [ID!]
  usersID: ID
}

"""
UpdateExerciseTypeInput is used for update ExerciseType object.
Input was generated by ent.
"""
input UpdateExerciseTypeInput {
  addExerciseIDs: [ID!]
  appendProperties: [String!]
  clearExercises: Boolean
  description: String
  name: String
  properties: [String!]
  removeExerciseIDs: [ID!]
}

"""
UpdateMusclesGroupInput is used for update MusclesGroup object.
Input was generated by ent.
"""
input UpdateMusclesGroupInput {
  addExerciseIDs: [ID!]
  clearExercises: Boolean
  image: String
  name: String
  removeExerciseIDs: [ID!]
}

"""
UpdateRoutineInput is used for update Routine object.
Input was generated by ent.
"""
input UpdateRoutineInput {
  addExerciseIDs: [ID!]
  clearExercises: Boolean
  clearUsers: Boolean
  name: String
  removeExerciseIDs: [ID!]
  usersID: ID
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  addExerciseIDs: [ID!]
  addRoutineIDs: [ID!]
  addTokenIDs: [ID!]
  addWorkoutIDs: [ID!]
  addWorkoutLogIDs: [ID!]
  clearExercises: Boolean
  clearRoutines: Boolean
  clearTokens: Boolean
  clearWorkoutLogs: Boolean
  clearWorkouts: Boolean
  email: String
  hashedPassword: String
  name: String
  removeExerciseIDs: [ID!]
  removeRoutineIDs: [ID!]
  removeTokenIDs: [ID!]
  removeWorkoutIDs: [ID!]
  removeWorkoutLogIDs: [ID!]
  username: String
}

"""
UpdateWorkoutInput is used for update Workout object.
Input was generated by ent.
"""
input UpdateWorkoutInput {
  addWorkoutLogIDs: [ID!]
  clearImage: Boolean
  clearTime: Boolean
  clearUsers: Boolean
  clearWorkoutLogs: Boolean
  description: String
  image: String
  name: String
  removeWorkoutLogIDs: [ID!]
  reps: Int
  sets: Int
  time: String
  usersID: ID
  volume: Int
}

type User implements Node {
  activated: Int!
  createdAt: String!
  email: String!
  exercises: [Exercise!]
  id: ID!
  name: String!
  routineExercises: [RoutineExercise!]
  routines: [Routine!]
  tokens: [Token!]
  username: String!
  version: Int!
  workoutLogs: [WorkoutLog!]
  workouts: [Workout!]
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: User
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  """activated field predicates"""
  activated: Int
  activatedGT: Int
  activatedGTE: Int
  activatedIn: [Int!]
  activatedLT: Int
  activatedLTE: Int
  activatedNEQ: Int
  activatedNotIn: [Int!]
  and: [UserWhereInput!]

  """created_at field predicates"""
  createdAt: String
  createdAtContains: String
  createdAtContainsFold: String
  createdAtEqualFold: String
  createdAtGT: String
  createdAtGTE: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtIn: [String!]
  createdAtLT: String
  createdAtLTE: String
  createdAtNEQ: String
  createdAtNotIn: [String!]

  """email field predicates"""
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]

  """routines edge predicates"""
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]

  """tokens edge predicates"""
  hasTokens: Boolean
  hasTokensWith: [TokenWhereInput!]

  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]

  """workouts edge predicates"""
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: UserWhereInput
  or: [UserWhereInput!]

  """username field predicates"""
  username: String
  usernameContains: String
  usernameContainsFold: String
  usernameEqualFold: String
  usernameGT: String
  usernameGTE: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIn: [String!]
  usernameLT: String
  usernameLTE: String
  usernameNEQ: String
  usernameNotIn: [String!]

  """version field predicates"""
  version: Int
  versionGT: Int
  versionGTE: Int
  versionIn: [Int!]
  versionLT: Int
  versionLTE: Int
  versionNEQ: Int
  versionNotIn: [Int!]
}

type Workout implements Node {
  createdAt: String!
  description: String!
  id: ID!
  image: String
  name: String!
  reps: Int!
  sets: Int!
  time: String
  userID: ID
  users: User
  volume: Int!
  workoutLogs: [WorkoutLog!]
}

"""A connection to a list of items."""
type WorkoutConnection {
  """A list of edges."""
  edges: [WorkoutEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type WorkoutEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Workout
}

type WorkoutLog implements Node {
  createdAt: String!
  exerciseID: ID
  exercises: Exercise
  id: ID!
  sets: [Set!]!
  userID: ID
  users: User
  workoutID: ID
  workouts: Workout
}

"""A connection to a list of items."""
type WorkoutLogConnection {
  """A list of edges."""
  edges: [WorkoutLogEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type WorkoutLogEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: WorkoutLog
}

"""
WorkoutLogWhereInput is used for filtering WorkoutLog objects.
Input was generated by ent.
"""
input WorkoutLogWhereInput {
  and: [WorkoutLogWhereInput!]

  """created_at field predicates"""
  createdAt: String
  createdAtContains: String
  createdAtContainsFold: String
  createdAtEqualFold: String
  createdAtGT: String
  createdAtGTE: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtIn: [String!]
  createdAtLT: String
  createdAtLTE: String
  createdAtNEQ: String
  createdAtNotIn: [String!]

  """exercise_id field predicates"""
  exerciseID: ID
  exerciseIDContains: ID
  exerciseIDContainsFold: ID
  exerciseIDEqualFold: ID
  exerciseIDGT: ID
  exerciseIDGTE: ID
  exerciseIDHasPrefix: ID
  exerciseIDHasSuffix: ID
  exerciseIDIn: [ID!]
  exerciseIDIsNil: Boolean
  exerciseIDLT: ID
  exerciseIDLTE: ID
  exerciseIDNEQ: ID
  exerciseIDNotIn: [ID!]
  exerciseIDNotNil: Boolean

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """workouts edge predicates"""
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: WorkoutLogWhereInput
  or: [WorkoutLogWhereInput!]

  """user_id field predicates"""
  userID: ID
  userIDContains: ID
  userIDContainsFold: ID
  userIDEqualFold: ID
  userIDGT: ID
  userIDGTE: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDLT: ID
  userIDLTE: ID
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean

  """workout_id field predicates"""
  workoutID: ID
  workoutIDContains: ID
  workoutIDContainsFold: ID
  workoutIDEqualFold: ID
  workoutIDGT: ID
  workoutIDGTE: ID
  workoutIDHasPrefix: ID
  workoutIDHasSuffix: ID
  workoutIDIn: [ID!]
  workoutIDIsNil: Boolean
  workoutIDLT: ID
  workoutIDLTE: ID
  workoutIDNEQ: ID
  workoutIDNotIn: [ID!]
  workoutIDNotNil: Boolean
}

"""
WorkoutWhereInput is used for filtering Workout objects.
Input was generated by ent.
"""
input WorkoutWhereInput {
  and: [WorkoutWhereInput!]

  """created_at field predicates"""
  createdAt: String
  createdAtContains: String
  createdAtContainsFold: String
  createdAtEqualFold: String
  createdAtGT: String
  createdAtGTE: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtIn: [String!]
  createdAtLT: String
  createdAtLTE: String
  createdAtNEQ: String
  createdAtNotIn: [String!]

  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """image field predicates"""
  image: String
  imageContains: String
  imageContainsFold: String
  imageEqualFold: String
  imageGT: String
  imageGTE: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIn: [String!]
  imageIsNil: Boolean
  imageLT: String
  imageLTE: String
  imageNEQ: String
  imageNotIn: [String!]
  imageNotNil: Boolean

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: WorkoutWhereInput
  or: [WorkoutWhereInput!]

  """reps field predicates"""
  reps: Int
  repsGT: Int
  repsGTE: Int
  repsIn: [Int!]
  repsLT: Int
  repsLTE: Int
  repsNEQ: Int
  repsNotIn: [Int!]

  """sets field predicates"""
  sets: Int
  setsGT: Int
  setsGTE: Int
  setsIn: [Int!]
  setsLT: Int
  setsLTE: Int
  setsNEQ: Int
  setsNotIn: [Int!]

  """time field predicates"""
  time: String
  timeContains: String
  timeContainsFold: String
  timeEqualFold: String
  timeGT: String
  timeGTE: String
  timeHasPrefix: String
  timeHasSuffix: String
  timeIn: [String!]
  timeIsNil: Boolean
  timeLT: String
  timeLTE: String
  timeNEQ: String
  timeNotIn: [String!]
  timeNotNil: Boolean

  """user_id field predicates"""
  userID: ID
  userIDContains: ID
  userIDContainsFold: ID
  userIDEqualFold: ID
  userIDGT: ID
  userIDGTE: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDLT: ID
  userIDLTE: ID
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean

  """volume field predicates"""
  volume: Int
  volumeGT: Int
  volumeGTE: Int
  volumeIn: [Int!]
  volumeLT: Int
  volumeLTE: Int
  volumeNEQ: Int
  volumeNotIn: [Int!]
}
